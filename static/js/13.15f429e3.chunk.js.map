{"version":3,"sources":["utils/calculatePeriod.ts","Components/Experience.tsx"],"names":["LITERALS","EN","years","y","months","m","GR","Loader","loadable","ProjectCard","IamAI","Experience","getContent","useContext","LanguageContext","useState","loaded","setLoaded","projects","setProjects","getTags","language","WORK_EXP","aboutMe","useEffect","axios","get","then","data","catch","e","console","error","message","className","experience","pinned","style","marginTop","marginLeft","map","exp","index","key","title","color","period","text","date","start","split","end","startYear","Number","endYear","startMonth","endMonth","Math","abs","floor","calculateMonths","description","recent","project","i","html_url","name","url"],"mappings":"2KAOMA,EAAW,CACfC,GAAI,CACFC,MAAO,SAACC,GAAD,OAAgBA,EAAI,EAAI,YAAc,YAC7CC,OAAQ,SAACC,GAAD,OAAgBA,EAAI,EAAI,SAAW,UAE7CC,GAAI,CACFJ,MAAO,SAACC,GAAD,OAAgBA,EAAI,EAAI,0DAAe,2DAC9CC,OAAQ,SAACC,GAAD,OAAgBA,EAAI,EAAI,iCAAU,oCCRxCE,EAASC,aAAS,kBAAM,gCACxBC,EAAcD,aAAS,kBAAM,iCAC7BE,EAAQF,aAAS,kBAAM,gCA2EdG,UAlEc,WAAO,IAC1BC,EAAeC,qBAAWC,KAA1BF,WADyB,EAELG,oBAAS,GAFJ,mBAE1BC,EAF0B,KAElBC,EAFkB,OAGDF,qBAHC,mBAG1BG,EAH0B,KAGhBC,EAHgB,OAIHN,qBAAWC,KAAjCM,EAJyB,EAIzBA,QAASC,EAJgB,EAIhBA,SACTC,EAAaV,IAAbU,SACAC,EAAYH,IAAZG,QAcR,OAZAC,qBAAU,WACRC,IACGC,IAAI,4DACJC,MAAK,SAACT,GACLC,EAAYD,EAASU,MACrBX,GAAU,MAEXY,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAAEG,cAEnB,IAEEjB,EAEH,yBAAKkB,UAAU,uBACb,6BACE,wBAAIA,UAAU,SAASd,IAAUe,WAAWC,QAC5C,yBAAKF,UAAU,MAAMG,MAAO,CAAEC,UAAW,QACvC,kBAAC5B,EAAD,QAGJ,yBAAKwB,UAAU,MAAMG,MAAO,CAAEC,UAAW,OAAQC,WAAY,WAC3D,wBAAIL,UAAU,SAASX,EAAQY,YAC/B,yBAAKD,UAAU,UACb,4BACGZ,EAASkB,KAAI,SAACC,EAAUC,GAAX,OACZ,wBAAIC,IAAKD,GACP,2BAAID,EAAIG,MAAR,KACA,8BACE,uBAAGP,MAAO,CAAEQ,MAAO,UAAWN,WAAY,QAA1C,IACIE,EAAIK,OAAOC,KADf,IACsB,IDrCT,SAACC,EAAe3B,GAC7C,IAAI4B,EAAQD,EAAKC,MAAMC,MAAM,KACzBC,EAAMH,EAAKG,IAAID,MAAM,KACrBhD,EAAQ,EACRE,EAAS,EACTgD,EAAYC,OAAOJ,EAAM,IACzBK,EAAUD,OAAOF,EAAI,IACrBI,EAAaF,OAAOJ,EAAM,IAC1BO,EAAWH,OAAOF,EAAI,IAY1B,OAVIC,IAAcE,EACZA,EAAUF,EAAY,EACxBlD,GAASuD,KAAKC,IAAIJ,EAAUF,GAE5BhD,GAAUqD,KAAKC,IAAIH,EAAa,IAAMC,EAGxCpD,GAAUqD,KAAKC,IAAIF,EAAWD,GAG5BnD,GAAU,IAAMF,EAAQ,GAC1BA,GAASuD,KAAKE,MAAMvD,EAAS,IAC7BA,GAAkB,GACZ,IAAN,OAAWF,EAAX,YAAoBF,EAASqB,GAAUnB,MAAMA,GAA7C,YAAuDE,EAAvD,YAAiEJ,EAC/DqB,GACAjB,OAAOA,GAFT,MAIM,IAAN,OAAWA,EAAX,YAAqBJ,EAASqB,GAAUjB,OAAOA,GAA/C,KCWiBwD,CAAgBnB,EAAIK,OAAOE,KAAM3B,IAEpC,2BAAIoB,EAAIoB,qBAQpB,wBAAI3B,UAAU,cAAcd,IAAUe,WAAW2B,QAChD5C,EAASsB,KAAI,SAACuB,EAAkBC,GAAnB,OACZ,yBAAK9B,UAAU,WAAWS,IAAKoB,EAAQE,UACrC,yBAAK/B,UAAU,UACb,kBAACzB,EAAD,CACEmC,MAAOmB,EAAQG,KACfL,YAAaE,EAAQF,YACrBM,IAAKJ,EAAQE,SACb5C,SAAU0C,EAAQ1C,iBArCV,kBAACd,EAAD","file":"static/js/13.15f429e3.chunk.js","sourcesContent":["import { ILanguage } from \"../Context/LanguageContext\";\n\nexport interface IPeriod {\n  start: string;\n  end: string;\n}\n\nconst LITERALS = {\n  EN: {\n    years: (y: number) => (y > 1 ? \"years and\" : \"year and\"),\n    months: (m: number) => (m > 1 ? \"months\" : \"month\"),\n  },\n  GR: {\n    years: (y: number) => (y > 1 ? \"χρόνια και\" : \"χρόνος και\"),\n    months: (m: number) => (m > 1 ? \"μήνες\" : \"μήνας\"),\n  },\n};\n\nexport const calculateMonths = (date: IPeriod, language: ILanguage) => {\n  let start = date.start.split(\"/\");\n  let end = date.end.split(\"/\");\n  let years = 0;\n  let months = 1;\n  let startYear = Number(start[1]);\n  let endYear = Number(end[1]);\n  let startMonth = Number(start[0]);\n  let endMonth = Number(end[0]);\n\n  if (startYear !== endYear) {\n    if (endYear - startYear > 1) {\n      years += Math.abs(endYear - startYear);\n    } else {\n      months += Math.abs(startMonth - 12) + endMonth;\n    }\n  } else {\n    months += Math.abs(endMonth - startMonth);\n  }\n\n  if (months >= 12 || years > 0) {\n    years += Math.floor(months / 12);\n    months = months % 12;\n    return `(${years} ${LITERALS[language].years(years)} ${months} ${LITERALS[\n      language\n    ].months(months)})`;\n  } else {\n    return `(${months} ${LITERALS[language].months(months)})`;\n  }\n};\n","import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LanguageContext } from \"../Context/LanguageContext\";\nimport loadable from \"@loadable/component\";\nimport { calculateMonths } from \"../utils/calculatePeriod\";\n\nconst Loader = loadable(() => import(\"../assets/Loader\"));\nconst ProjectCard = loadable(() => import(\"./ProjectCard\"));\nconst IamAI = loadable(() => import(\"./iamAI\"));\n\ninterface Project {\n  name: string;\n  description: string;\n  html_url: string;\n  language: string;\n}\n\nconst Experience: React.FC = () => {\n  const { getContent } = useContext(LanguageContext);\n  const [loaded, setLoaded] = useState(false);\n  const [projects, setProjects] = useState<any>();\n  const { getTags, language } = useContext(LanguageContext);\n  const { WORK_EXP } = getContent();\n  const { aboutMe } = getTags();\n\n  useEffect(() => {\n    axios\n      .get(\"https://api.github.com/users/iamtheef/repos?sort=created\")\n      .then((projects) => {\n        setProjects(projects.data);\n        setLoaded(true);\n      })\n      .catch((e) => {\n        console.error(e.message);\n      });\n  }, []);\n\n  if (!loaded) return <Loader />;\n  return (\n    <div className=\"container marginTop\">\n      <div>\n        <h3 className=\"intro\">{getTags().experience.pinned}</h3>\n        <div className=\"row\" style={{ marginTop: \"-2%\" }}>\n          <IamAI />\n        </div>\n      </div>\n      <div className=\"row\" style={{ marginTop: \"5rem\", marginLeft: \"0.3rem\" }}>\n        <h1 className=\"intro\">{aboutMe.experience}</h1>\n        <div className=\"col-12\">\n          <ul>\n            {WORK_EXP.map((exp: any, index: number) => (\n              <li key={index}>\n                <b>{exp.title} </b>\n                <span>\n                  <i style={{ color: \"#90dc6f\", marginLeft: \"5px\" }}>\n                    [{exp.period.text}]{\" \"}\n                    {calculateMonths(exp.period.date, language)}\n                  </i>\n                  <p>{exp.description}</p>\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <h3 className=\"intro mt-5\">{getTags().experience.recent}</h3>\n      {projects.map((project: Project, i: number) => (\n        <div className=\"row mb-4\" key={project.html_url}>\n          <div className=\"col-md\">\n            <ProjectCard\n              title={project.name}\n              description={project.description}\n              url={project.html_url}\n              language={project.language}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experience;\n"],"sourceRoot":""}