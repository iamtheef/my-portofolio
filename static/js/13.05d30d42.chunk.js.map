{"version":3,"sources":["utils/calculatePeriod.ts","Components/Experience.tsx"],"names":["LITERALS","EN","years","y","months","m","and","GR","Loader","loadable","ProjectCard","IamAI","Experience","getContent","useContext","LanguageContext","useState","loaded","setLoaded","projects","setProjects","getTags","language","WORK_EXP","aboutMe","useEffect","axios","get","then","data","catch","e","console","error","message","className","experience","pinned","style","marginTop","marginLeft","map","exp","index","key","fontFamily","fontSize","title","color","period","text","date","start","split","end","startYear","Number","endYear","startMonth","endMonth","startDate","Date","timeDifference","getTime","Math","ceil","floor","calculateMonths","description","recent","project","i","html_url","name","url"],"mappings":"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","file":"static/js/13.05d30d42.chunk.js","sourcesContent":["import { ILanguage } from \"../Context/LanguageContext\";\n\nexport interface IPeriod {\n  start: string;\n  end: string;\n}\n\nconst LITERALS = {\n  EN: {\n    years: (y: number) => (y > 1 ? \"years\" : \"year\"),\n    months: (m: number) => (m > 0 ? (m > 1 ? \"months\" : \"month\") : \"\"),\n    and: \" and \",\n  },\n  GR: {\n    years: (y: number) => (y > 1 ? \"χρόνια\" : \"χρόνος\"),\n    months: (m: number) => (m > 0 ? (m > 1 ? \"μήνες\" : \"μήνα\") : \"\"),\n    and: \" και \",\n  },\n};\n\nexport const calculateMonths = (date: IPeriod, language: ILanguage) => {\n  let start = date.start.split(\"/\");\n  let end = date.end.split(\"/\");\n  let years = 0;\n  let months = 0;\n  let startYear = Number(start[1]);\n  let endYear = Number(end[1]);\n  let startMonth = Number(start[0]);\n  let endMonth = Number(end[0]);\n\n  if (endMonth < startMonth) {\n    endYear -= 1;\n    endMonth += 12;\n  }\n\n  const startDate = new Date(startYear, startMonth - 1);\n  const endDate = new Date(endYear, endMonth - 1);\n  const timeDifference = endDate.getTime() - startDate.getTime();\n\n  months = Math.ceil(timeDifference / (30 * 24 * 60 * 60 * 1000));\n\n  years = Math.floor(months / 12);\n  months = months % 12;\n\n  if (years > 0 || months > 0) {\n    return `(${years} ${LITERALS[language].years(years)}${\n      years > 0 && months > 0 ? LITERALS[language].and : \"\"\n    }${months > 0 ? ` ${months} ${LITERALS[language].months(months)}` : \"\"})`;\n  } else {\n    return `(${months} ${LITERALS[language].months(months)})`;\n  }\n};\n","import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { LanguageContext } from \"../Context/LanguageContext\";\nimport loadable from \"@loadable/component\";\nimport { calculateMonths } from \"../utils/calculatePeriod\";\n\nconst Loader = loadable(() => import(\"../assets/Loader\"));\nconst ProjectCard = loadable(() => import(\"./ProjectCard\"));\nconst IamAI = loadable(() => import(\"./iamAI\"));\n\ninterface Project {\n  name: string;\n  description: string;\n  html_url: string;\n  language: string;\n}\n\nconst Experience: React.FC = () => {\n  const { getContent } = useContext(LanguageContext);\n  const [loaded, setLoaded] = useState(false);\n  const [projects, setProjects] = useState<any>();\n  const { getTags, language } = useContext(LanguageContext);\n  const { WORK_EXP } = getContent();\n  const { aboutMe } = getTags();\n\n  useEffect(() => {\n    axios\n      .get(\"https://api.github.com/users/iamtheef/repos?sort=created\")\n      .then((projects) => {\n        setProjects(projects.data);\n        setLoaded(true);\n      })\n      .catch((e) => {\n        console.error(e.message);\n      });\n  }, []);\n\n  if (!loaded) return <Loader />;\n  return (\n    <div className=\"container marginTop\">\n      <div>\n        <h3 className=\"intro\">{getTags().experience.pinned}</h3>\n        <div className=\"row\" style={{ marginTop: \"-2%\" }}>\n          <IamAI />\n        </div>\n      </div>\n      <div className=\"row\" style={{ marginTop: \"5rem\", marginLeft: \"0.3rem\" }}>\n        <h1 className=\"intro\">{aboutMe.experience}</h1>\n        <div className=\"col-12\">\n          <ul>\n            {WORK_EXP.map((exp: any, index: number) => (\n              <li key={index}>\n                <b style={{ fontFamily: \"Nanum Gothic\", fontSize: \"20px\" }}>\n                  {exp.title}{\" \"}\n                </b>\n                <span>\n                  <i style={{ color: \"#60c8d6\", marginLeft: \"5px\" }}>\n                    {exp.period.text}{\" \"}\n                    {calculateMonths(exp.period.date, language)}\n                  </i>\n                  <p>{exp.description}</p>\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <h3 className=\"intro mt-5\">{getTags().experience.recent}</h3>\n      {projects.map((project: Project, i: number) => (\n        <div className=\"row mb-4\" key={project.html_url}>\n          <div className=\"col-md\">\n            <ProjectCard\n              title={project.name}\n              description={project.description}\n              url={project.html_url}\n              language={project.language}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Experience;\n"],"sourceRoot":""}