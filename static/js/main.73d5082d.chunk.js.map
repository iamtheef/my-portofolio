{"version":3,"sources":["Context/LanguageContext.tsx","utils/isActive.ts","Components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Language","LanguageContext","createContext","language","english","LanguageProvider","children","useState","JSON","parse","window","localStorage","getItem","setLanguage","useEffect","setItem","stringify","Provider","value","isGreek","isActive","name","location","hash","Navbar","useContext","dropdown","setDropdown","className","to","onClick","type","id","data-toggle","style","marginLeft","aria-labelledby","Background","loadable","Intro","About","Experience","Contact","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73d5082d.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\nenum Language {\n  english = \"EN\",\n  greek = \"GR\",\n}\ninterface LanguageContext {\n  language?: Language;\n  setLanguage?: any;\n  isGreek?: any;\n}\n\nexport const LanguageContext = createContext<LanguageContext>({\n  language: Language.english,\n});\n\nexport function LanguageProvider({ children }: Props) {\n  const [language, setLanguage] = useState<Language>(\n    JSON.parse(window.localStorage.getItem(\"lang\") as string) ||\n      Language.english\n  );\n\n  function isGreek() {\n    return language === \"GR\";\n  }\n  useEffect(() => {\n    window.localStorage.setItem(\"lang\", JSON.stringify(language));\n  });\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, isGreek }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n","const isActive = (name: string) => {\n  const hash = window.location.hash;\n\n  return hash === name;\n};\n\nexport default isActive;\n","import React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LanguageContext } from \"../Context/LanguageContext\";\nimport isActive from \"../utils/isActive\";\n\nexport const Navbar: React.FC = () => {\n  const { language, setLanguage, isGreek } = useContext(LanguageContext);\n  const [dropdown, setDropdown] = useState(false);\n\n  return (\n    <div className=\"mt-4\">\n      <div className=\"container\">\n        <div className=\"row navbar\">\n          <div className=\"col\">\n            <div className=\"row pt-2\">\n              <Link\n                to=\"/\"\n                className={`col-lg navbar-button ${isActive(\"#/\") && \"active\"}`}\n              >\n                {isGreek() ? \"Αρχική\" : \"Home\"}\n              </Link>\n              <Link\n                className={`col-lg navbar-button ${\n                  isActive(\"#/experience\") && \"active\"\n                }`}\n                to=\"/experience\"\n              >\n                {isGreek() ? \"Εμπειρία\" : \"Experience\"}\n              </Link>\n              <Link\n                className={`col-lg navbar-button ${\n                  isActive(\"#/about\") && \"active\"\n                }`}\n                to=\"/about\"\n              >\n                {isGreek() ? \"Σχετικά με εμένα\" : \"About Me\"}\n              </Link>\n              <Link\n                className={`col-lg navbar-button ${\n                  isActive(\"#/contact\") && \"active\"\n                }`}\n                to=\"/contact\"\n              >\n                {isGreek() ? \"Επικοινωνήστε\" : \"Contact\"}\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"dropdown\" onClick={() => setDropdown(!dropdown)}>\n            <button\n              className=\"btn dropdown-toggle\"\n              type=\"button\"\n              id=\"dropdownMenuButton\"\n              data-toggle=\"dropdown\"\n            >\n              {language}\n            </button>\n            <div\n              // negative margin is to make the menu open to the left of the button's bottom\n              style={{\n                marginLeft: \"-170%\",\n              }}\n              className={`dropdown-menu ${dropdown && \"expanded\"}`}\n              aria-labelledby=\"dropdownMenuButton\"\n            >\n              <div className=\"dropdown-item\" onClick={() => setLanguage(\"EN\")}>\n                EN\n              </div>\n              <div className=\"dropdown-item\" onClick={() => setLanguage(\"GR\")}>\n                GR\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport { LanguageProvider } from \"./Context/LanguageContext\";\nimport { Navbar } from \"./Components/Navbar\";\nimport loadable from \"@loadable/component\";\n\nconst Background = loadable(() => import(\"./Components/Background\"));\nconst Intro = loadable(() => import(\"./Components/Intro\"));\nconst About = loadable(() => import(\"./Components/AboutMe\"));\nconst Experience = loadable(() => import(\"./Components/Experience\"));\nconst Contact = loadable(() => import(\"./Components/Contact\"));\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <LanguageProvider>\n          <Navbar />\n          <Background />\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/experience\" component={Experience} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </LanguageProvider>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}